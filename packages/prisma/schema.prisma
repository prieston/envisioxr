// schema.prisma
// This is your Prisma schema file.
// Learn more: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  email                 String?       @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?       @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
  projects              Project[]
  assets                Asset[]
  subscription          Subscription? // One-to-one relation with Subscription
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  // sceneData stores your scene's configuration in JSON format.
  sceneData    Json
  engine       Engine   @default(three)
  // isPublished indicates whether the project is public.
  isPublished  Boolean  @default(false)
  // publishedUrl could be generated based on the project ID or a slug.
  publishedUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // A project is owned by a user.
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Optional relation to assets (if you attach models to a project).
  assets Asset[]
}

enum Engine {
  three
  cesium
}

model Asset {
  id               String    @id @default(cuid())
  userId           String
  projectId        String? // asset can optionally be linked to a project
  assetType        AssetType @default(model) // Type of asset: model or cesiumIonAsset
  fileUrl          String // URL to the file in your cloud storage
  fileType         String // e.g., "glb", "3dm", "jpg", etc.
  originalFilename String
  name             String? // User-defined friendly name for the asset
  description      String? // User-defined description of the asset
  thumbnail        String? // URL for the captured thumbnail image
  metadata         Json? // Stores descriptive information about the model
  // Cesium Ion specific fields
  cesiumAssetId    String? // Cesium Ion asset ID (only for cesiumIonAsset type)
  cesiumApiKey     String? // Cesium Ion API key (only for cesiumIonAsset type)
  createdAt        DateTime  @default(now())

  // Relations:
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

enum AssetType {
  model // Regular 3D model (GLB, GLTF)
  cesiumIonAsset // Cesium Ion georeferenced asset
}

// Subscription model to track user subscriptions via Stripe
model Subscription {
  id        String    @id @default(cuid())
  stripeId  String    @unique
  planId    String
  status    String
  startDate DateTime  @default(now())
  endDate   DateTime?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
